// Generated by CoffeeScript 1.6.3
(function() {
  var EndOfLineNode, EndOfSourceFilePosition, SourceFileName, SourceLine, SourceLinePosition, TextNode, inspect, merge, repeatedString, utils;

  utils = require("./utils.js");

  merge = utils.merge;

  inspect = utils.inspect;

  SourceFileName = (function() {
    function SourceFileName(fileName) {
      this.fileName = fileName;
    }

    SourceFileName.prototype.toString = function() {
      return this.fileName;
    };

    SourceFileName.prototype.line = function(string, lineNumber) {
      return new SourceLine(this, string, lineNumber);
    };

    SourceFileName.prototype.endOfFilePosition = function(lines) {
      var lastLine, numLines;
      numLines = lines.length;
      lastLine = numLines > 0 ? lines[numLines - 1] : null;
      return new EndOfSourceFilePosition(this, numLines, lastLine);
    };

    return SourceFileName;

  })();

  EndOfSourceFilePosition = (function() {
    function EndOfSourceFilePosition(sourceFileName, numLines, lastLine) {
      this.sourceFileName = sourceFileName;
      this.numLines = numLines;
      this.lastLine = lastLine;
    }

    EndOfSourceFilePosition.prototype.toString = function() {
      return this.sourceFileName + ":" + this.numLines;
    };

    return EndOfSourceFilePosition;

  })();

  SourceLine = (function() {
    function SourceLine(sourceFileName, line, lineNumber) {
      this.sourceFileName = sourceFileName;
      this.line = line;
      this.lineNumber = lineNumber;
    }

    SourceLine.prototype.toString = function() {
      return this.sourceFileName + ":" + this.lineNumber;
    };

    SourceLine.prototype.position = function(linePosition) {
      return new SourceLinePosition(this, linePosition);
    };

    return SourceLine;

  })();

  repeatedString = function(string, numRepeats) {
    var i;
    return ((function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= numRepeats ? _i <= numRepeats : _i >= numRepeats; i = 0 <= numRepeats ? ++_i : --_i) {
        _results.push(string);
      }
      return _results;
    })()).join("");
  };

  SourceLinePosition = (function() {
    function SourceLinePosition(sourceLine, position) {
      this.sourceLine = sourceLine;
      this.position = position;
    }

    SourceLinePosition.prototype.toString = function() {
      return this.sourceLine + ":" + this.position;
    };

    SourceLinePosition.prototype.logLineAndPosition = function() {
      var line1, line2, linePrefix;
      linePrefix = this.toString() + ":";
      line1 = linePrefix + this.sourceLine.line;
      line2 = repeatedString(" ", linePrefix.length + this.position - 1) + "^";
      return [line1, line2];
    };

    return SourceLinePosition;

  })();

  TextNode = (function() {
    function TextNode(string, sourceLinePosition) {
      this.string = string;
      this.sourceLinePosition = sourceLinePosition;
    }

    TextNode.prototype.toString = function() {
      return "[TextNode " + inspect(this.string) + "]";
    };

    TextNode.prototype.addToResult = function(compiler, result) {
      return compiler.compileTextChild(result, this.string);
    };

    return TextNode;

  })();

  EndOfLineNode = (function() {
    function EndOfLineNode(sourceLinePosition) {
      this.sourceLinePosition = sourceLinePosition;
    }

    EndOfLineNode.prototype.toString = function() {
      return "[EndOfLineNode]";
    };

    EndOfLineNode.prototype.addToResult = function(compiler, result) {
      return compiler.compileEndOfLineChild(result);
    };

    return EndOfLineNode;

  })();

  exports.SourceFileName = SourceFileName;

  exports.TextNode = TextNode;

  exports.EndOfLineNode = EndOfLineNode;

}).call(this);

/*
//@ sourceMappingURL=bracketup1.map
*/
